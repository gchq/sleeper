<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2022-2025 Crown Copyright
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
    <suppress>
        <notes><![CDATA[
        Spark is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.spark/.*$</packageUrl>
        <cpe>cpe:/a:apache:spark:3.5.5</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Spark is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html

        Some of the Spark dependencies were not identified by the Spark CPE, so we've added this to catch
        several shaded dependencies.
        ]]></notes>
        <filePath regex="true">^.*/spark-[^/]+-3\.5\.5\.jar/.*$</filePath>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Arrow is used in the state store and standard ingest, and is also a dependency of Spark. Because it's a
        dependency of Spark, the version we're able to use is restricted by support in AWS EMR.

        This affects the Arrow R package, which we don't use internally. It doesn't seem to affect the Arrow
        implementations that we use.

        This was found against Arrow 12.0.1.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.arrow/arrow-.*@.*$</packageUrl>
        <cve>CVE-2024-52338</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Hadoop is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.hadoop/.*$</packageUrl>
        <cpe>cpe:/a:apache:hadoop:3.4.1</cpe>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Hadoop is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html

        Hadoop uses a shaded version of Protobuf with vulnerabilities.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.hadoop\.thirdparty/hadoop-shaded-protobuf_3_25@.*$</packageUrl>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Hadoop is suppressed as the version we are able to use is restricted by support in AWS EMR:
        https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-release-components.html

        Some of the Hadoop dependencies were not identified by the Hadoop CPE, so we've added this to catch
        several shaded dependencies.
        ]]></notes>
        <filePath regex="true">^.*/hadoop-client-[^/]+-3\.4\.1\.jar/.*$</filePath>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The version of Athena we're using uses an old version of Bouncy Castle Provider, with an old Maven artifact that
        doesn't have a fixed version.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.bouncycastle/bcprov\-jdk15on@.*$</packageUrl>
        <vulnerabilityName regex="true">CVE-2023-33201|CVE-2024-29857|CVE-2024-30172|CVE-2024-30171|CVE-2024-34447</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The AWS CDK uses Javascript code with a vulnerable NPM package. Once there's a version of the CDK that doesn't,
        we can use that instead.
        ]]></notes>
        <filePath regex="true">^.*/cdk-asset-awscli-v1-[.0-9]+\.jar/.*$</filePath>
        <cve>CVE-2021-23497</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The AWS CDK uses a vulnerable Ruby gem. Once there's a version of the CDK that doesn't, we can use that instead.
        ]]></notes>
        <filePath regex="true">^.*/cdk-asset-awscli-v1-[.0-9]+\.jar/.*$</filePath>
        <cve>CVE-2020-10663</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        At time of writing, the latest version of Avro IPC uses an old version of jQuery in its static pages for stats.
        We don't expose that page, so it won't be a problem.
        This is a provided dependency for the module bulk-import/bulk-import-runner.
        ]]></notes>
        <filePath regex="true">^.*/avro-ipc-1\.12\.0\.jar/.*/jquery-.*\.js$</filePath>
        <vulnerabilityName regex="true">.*</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This seems to be a false positive as the CVE is for the Go implementation of Avro, which we're not using.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.avro/avro\-(ipc|mapred)@.*$</packageUrl>
        <cve>CVE-2023-37475</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Spark SQL integrates with Apache Hive, but we don't use it.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apache\.hive/hive\-storage\-api@.*$</packageUrl>
        <vulnerabilityName regex="true">CVE-2021-34538|CVE-2024-23953|CVE-2024-23945|CVE-2024-29869</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Bouncy Castle is a dependency for Athena. We also use the library in the build module but we use a more recent
        version that is not vulnerable.

        Athena declares a dependency on an old Maven artifact targeted at JDK 1.5, and there's no updated version of
        that artifact.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.bouncycastle/bcprov\-jdk15on@.*$</packageUrl>
        <cve>CVE-2023-33202</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        JGraphT is used in the build module to visualise the dependencies between Maven modules. This is not used in
        production code, and there is not a more up to date version that does not have this problem.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.jgrapht/jgrapht\-core@.*$</packageUrl>
        <vulnerabilityName regex="true">CVE-2024-23078|CVE-2024-23079</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        Apfloat is used in the build module by JUNG for visualising dependencies between Maven modules. This is not used
        in production code, and there is not a more up to date version that does not have this problem.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.apfloat/apfloat@.*$</packageUrl>
        <vulnerabilityName regex="true">CVE-2024-23084|CVE-2024-23085</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        We're not using the HttpURI class directly, and the CVE states that Jetty is not vulnerable unless you use that
        directly.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.eclipse\.jetty(/.*$|\.http2/http2.*$|\.websocket/websocket.*$)</packageUrl>
        <vulnerabilityName>CVE-2024-6763</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This dependency is only used by WireMock, which is only used for tests. The CVE also seems to incorrectly match
        the version we're using. It's listed as having arised in version 12.0.0, and we're using 9.4.57 at time of
        writing.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.eclipse\.jetty\.http2/http2-common@.*$</packageUrl>
        <vulnerabilityName>CVE-2025-1948</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        DOMPurify is only used by WireMock, which is only used for tests. We're not able to upgrade to a later version
        of WireMock that doesn't use this. Later versions of WireMock use Jetty 11 or 12, and the version of Hadoop
        we're using uses Jetty 9.
        ]]></notes>
        <packageUrl regex="true">^pkg:javascript/DOMPurify@.*$</packageUrl>
        <vulnerabilityName regex="true">CVE-2024-45801|CVE-2024-47875|CVE-2024-48910|CVE-2025-26791</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This seems to be a false positive, as the CVE is for Eclipse Glassfish, which isn't on the classpath for Sleeper
        anywhere. The dependency it flagged is for HK2, which is a dependency injection framework used by both Glassfish
        and Jersey. We only have Jersey and not Glassfish. The version number it's flagged is also specific to the OSGi
        Resource Locator, and not Glassfish, and it's comparing it to the vulnerable version of Glassfish.
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.glassfish\.hk2/osgi-resource-locator@.*$</packageUrl>
        <cve>CVE-2024-9329</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        RoaringBitmap is a dependency of spark-core. At time of writing the latest version is still vulnerable.
        Dependabot should update it automatically when a fixed version is available.
        file name: RoaringBitmap-1.3.0.jar
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.roaringbitmap/RoaringBitmap@.*$</packageUrl>
        <cve>CVE-2018-17073</cve>
    </suppress>
    <suppress>
        <notes><![CDATA[
        The following JSON libraries have a stack overflow issue that allows for DDoS attacks.
        Once there's a version of any of these libraries that don't, we can use those instead.

        These are used by AWS SDK v2. We'll need to wait for AWS to resolve this, and Dependabot should update it
        automatically.
        file name: aws-json-protocol-2.31.59.jar
        file name: json-utils-2.31.59.jar
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/software\.amazon\.awssdk/aws-json-protocol@.*$|^pkg:maven/software\.amazon\.awssdk/json-utils@.*$</packageUrl>
        <vulnerabilityName regex="true">CVE-2022-45688|CVE-2023-5072</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
        This is a false positive which is only used for testing, given that it is a dependency of WireMock.
        Dependabot should update it automatically when a fixed version is available.
        file name: xmlunit-core-2.10.3.jar
        ]]></notes>
        <packageUrl regex="true">^pkg:maven/org\.xmlunit/xmlunit-core@.*$</packageUrl>
        <cve>CVE-2024-9410</cve>
    </suppress>
</suppressions>
