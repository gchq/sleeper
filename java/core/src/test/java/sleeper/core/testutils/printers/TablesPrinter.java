/*
 * Copyright 2022-2025 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sleeper.core.testutils.printers;

import java.io.PrintStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * A utility class to print matching and differing strings generated from a table name.
 * Intended to be used for approval tests.
 */
public class TablesPrinter {

    private TablesPrinter() {
    }

    /**
     * Prints matching and differing strings generated using a table name. When multiple tables generate the
     * same string, the output is only printed once, along with a summary of how many tables generated the same
     * output string. This method is useful for when you want to assert whether the output for all tables are identical.
     * <p>
     * Note that this will not output table names.
     *
     * @param  tableNames   the collection of table names
     * @param  tablePrinter the function that generates a printed line from a table name
     * @return              a string containing output strings generated by tables
     */
    public static String printForAllTablesExcludingNames(Collection<String> tableNames, Function<String, String> tablePrinter) {
        Map<String, List<String>> tableNamesByPrintedValue = tableNames.stream()
                .collect(Collectors.groupingBy(tablePrinter));
        List<Map.Entry<String, List<String>>> printedSortedByFrequency = tableNamesByPrintedValue.entrySet().stream()
                .sorted(Comparator.comparing(entry -> entry.getValue().size()))
                .collect(Collectors.toUnmodifiableList());
        ToStringPrintWriter printer = new ToStringPrintWriter();
        PrintStream out = printer.getPrintStream();

        for (Map.Entry<String, List<String>> entry : printedSortedByFrequency) {
            String printedValue = entry.getKey();
            List<String> tablesThatPrintThisValue = entry.getValue();
            int frequency = tablesThatPrintThisValue.size();
            if (frequency == 1) {
                if (printedSortedByFrequency.size() == 1) {
                    out.println("One table");
                } else {
                    out.println("Different for one table");
                }
            } else {
                out.println("Same for " + frequency + " tables");
            }
            out.println(printedValue);
        }
        return printer.toString();
    }
}
