/*
 * Copyright 2022-2025 Crown Copyright
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package sleeper.systemtest.datageneration;

import org.apache.commons.math3.random.RandomGenerator;

import sleeper.systemtest.configuration.SystemTestProperties;
import sleeper.systemtest.configuration.SystemTestPropertyValues;
import sleeper.systemtest.configuration.SystemTestRandomDataSettings;

/**
 * Contains parameters to control the random data generated by a RandomRecordSupplier.
 */
public class RandomRecordSupplierConfig {
    private final SystemTestRandomDataSettings randomDataSettings;
    private final RandomGenerator generator;

    public RandomRecordSupplierConfig(SystemTestProperties systemTestProperties) {
        this(systemTestProperties.testPropertiesOnly());
    }

    public RandomRecordSupplierConfig(SystemTestPropertyValues systemTestProperties) {
        this(systemTestProperties, null);
    }

    public RandomRecordSupplierConfig(SystemTestPropertyValues systemTestProperties, RandomGenerator generator) {
        this(SystemTestRandomDataSettings.fromProperties(systemTestProperties),
                generator);
    }

    public RandomRecordSupplierConfig(
            SystemTestRandomDataSettings randomDataSettings,
            RandomGenerator generator) {
        this.randomDataSettings = randomDataSettings;
        this.generator = generator;
    }

    public int getMinRandomInt() {
        return randomDataSettings.getMinInt();
    }

    public int getMaxRandomInt() {
        return randomDataSettings.getMaxInt();
    }

    public long getMinRandomLong() {
        return randomDataSettings.getMinLong();
    }

    public long getMaxRandomLong() {
        return randomDataSettings.getMaxLong();
    }

    public int getRandomStringLength() {
        return randomDataSettings.getStringLength();
    }

    public int getRandomByteArrayLength() {
        return randomDataSettings.getByteArrayLength();
    }

    public int getMaxEntriesInRandomMap() {
        return randomDataSettings.getMaxMapEntries();
    }

    public int getMaxEntriesInRandomList() {
        return randomDataSettings.getMaxListEntries();
    }

    public RandomGenerator getGenerator() {
        return generator;
    }
}
