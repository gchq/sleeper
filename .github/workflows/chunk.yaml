on:
  workflow_call:
    inputs:
      chunkId:
        required: true
        type: string
      skipRust:
        default: true
        required: false
        type: boolean

env:
  CROSS_CONFIG: "Cross.sccache.toml"
  SCCACHE_GHA_ENABLED: "true"
  SSCACHE_CACHE_SIZE: "2G"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - uses: dtolnay/rust-toolchain@1.79.0
        if: ${{ ! inputs.skipRust }}
      - uses: mozilla-actions/sccache-action@v0.0.5
        if: ${{ ! inputs.skipRust }}
      - name: Install cargo cross
        run: cargo install cross
        if: ${{ ! inputs.skipRust }}
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Resolve dependencies
        run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -Dmaven.repo.local=${{ runner.temp }}/.m2/repository
        working-directory: ./java
      - name: Get chunk configuration
        id: config
        working-directory: ./java/build
        run: |
          mvn compile exec:java -q -Dexec.mainClass=sleeper.build.chunks.GetChunkConfig \
            -Dmaven.repo.local=${{ runner.temp }}/.m2/repository \
            -Dexec.args="${{ inputs.chunkId }} github_actions_outputs ${{ github.workspace }}/.github/config/chunks.yaml" \
            >> $GITHUB_OUTPUT
      - name: Compile
        run: mvn --batch-mode clean install -am -pl ${{ steps.config.outputs.moduleList }} -Pquick,skipShade -DskipRust=${{ inputs.skipRust }} -Dmaven.repo.local=${{ runner.temp }}/.m2/repository
        working-directory: ./java
      - name: Test
        id: test
        run: mvn --batch-mode --fail-at-end verify -pl ${{ steps.config.outputs.moduleList }} -DskipRust=true -Dmaven.repo.local=${{ runner.temp }}/.m2/repository -e
        working-directory: ./java
      - name: Generate site
        id: site
        if: failure() && steps.test.conclusion == 'failure'
        run: |
          mvn --batch-mode clean site-deploy -PcleanForSite -pl sleeper:aws,${{ steps.config.outputs.moduleList }} \
            -Dmaven.repo.local=${{ runner.temp }}/.m2/repository
        working-directory: ./java
      - name: Upload site as artifact
        if: failure() && steps.site.conclusion == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: site
          path: |
            /tmp/sleeper/site
